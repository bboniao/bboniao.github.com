<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>My Blog</title>
 <link href="http://bboniao.com//atom.xml" rel="self"/>
 <link href="http://bboniao.com"/>
 <updated>2014-06-24T21:44:36+08:00</updated>
 <id>http://bboniao.com</id>
 <author>
   <name>bboniao</name>
 </author>

 
 <entry>
   <title>Java Microbenchmarking Harness(jmh)></title>
   <link href="http://bboniao.com/openjdk/2014-06/java-microbenchmarking-harnessjmh.html"/>
   <updated>2014-06-24T00:00:00+08:00</updated>
   <id>http://bboniao.com/openjdk/2014-06/java-microbenchmarking-harnessjmh</id>
   <content type="html">下载源代码,并放到本地库中
hg clone http://hg.openjdk.java.net/code-tools/jmh/ jmh
cd jmh/
mvn clean install -DskipTests

创建项目
mvn archetype:generate \
      -DinteractiveMode=false \
      -DarchetypeGroupId=org.openjdk.jmh \
      -DarchetypeArtifactId=jmh-java-benchmark-archetype \
      -DgroupId=org.samp...</content>
 </entry>
 
 <entry>
   <title>Java Object Layout(jol)></title>
   <link href="http://bboniao.com/openjdk/2014-06/java-object-layoutjol.html"/>
   <updated>2014-06-23T00:00:00+08:00</updated>
   <id>http://bboniao.com/openjdk/2014-06/java-object-layoutjol</id>
   <content type="html">下载源代码:
hg clone http://hg.openjdk.java.net/code-tools/jol/ jol
cd jol
mvn clean install

pom.xml添加依赖
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.openjdk.jol&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jol-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;



代码
pu...</content>
 </entry>
 
 <entry>
   <title>Java Concurrency Stress(jcstress)></title>
   <link href="http://bboniao.com/openjdk/2014-06/java-concurrency-stressjcstress.html"/>
   <updated>2014-06-23T00:00:00+08:00</updated>
   <id>http://bboniao.com/openjdk/2014-06/java-concurrency-stressjcstress</id>
   <content type="html">下载源代码:hg clone http://hg.openjdk.java.net/code-tools/jcstress/jcstress

在tests-custom/pom.xml添加即将测试代码的依赖

在tests-custom下编写测试代码

在tests-custom下resources/org/openjdk/jcstress/desc下编写xml描述文件

在源代码根目录,执行mvn clean install -pl tests-custom -am

再执行 java -jar tests-custom/target/jcstress.jar -t &amp;#39;.*T...</content>
 </entry>
 
 <entry>
   <title>HouseMD使用></title>
   <link href="http://bboniao.com/jvm/2014-05/housemd.html"/>
   <updated>2014-05-25T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-05/housemd</id>
   <content type="html">安装HouseMD

下载housemd-0.2.6
解压,进入目录,执行./housemd pid

命令quit
terminate the process.

命令help
display this infomation.

quit         terminate the process.
help         display this infomation.
last         show exception stack trace of last error.
trace        display or output infomation of method ...</content>
 </entry>
 
 <entry>
   <title>Java Performance:The Definitive Guide Chapter 4></title>
   <link href="http://bboniao.com/java%20performance:the%20definitive%20guide/2014-05/java-performancethe-definitive-guide-chapter-4.html"/>
   <updated>2014-05-17T00:00:00+08:00</updated>
   <id>http://bboniao.com/java%20performance:the%20definitive%20guide/2014-05/java-performancethe-definitive-guide-chapter-4</id>
   <content type="html">Tuning the Code Cache

-XX:ReservedCodeCacheSize=N,-XX:InitialCodeCacheSize=N,调整code cache size的大小.查看方式:jmc--MBean Server--Memory--Active Memory Pools--Code Cache和jconsole--Memory--Chart--Memory pool &amp;quot;Code Cache&amp;quot;



jvm类型
默认code cache size



32-bit client,Java 8
32MB


32-bit server wi...</content>
 </entry>
 
 <entry>
   <title>Java Performance:The Definitive Guide Chapter 3></title>
   <link href="http://bboniao.com/java%20performance:the%20definitive%20guide/2014-05/java-performancethe-definitive-guide-chapter-3.html"/>
   <updated>2014-05-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/java%20performance:the%20definitive%20guide/2014-05/java-performancethe-definitive-guide-chapter-3</id>
   <content type="html">Network Usage

nicstat

nicstat 1
    Time      Int   rKB/s   wKB/s   rPk/s   wPk/s    rAvs    wAvs %Util    Sat
21:45:53       lo    1.45    1.45    8.54    8.54   174.0   174.0  0.00   0.00
21:45:53     eth0   35.45   12.14   72.33   86.34   501.9   144.0  0.04   0.00
21:45:53     eth1    0.43 ...</content>
 </entry>
 
 <entry>
   <title>Java Performance:The Definitive Guide Chapter 1 2></title>
   <link href="http://bboniao.com/java%20performance:the%20definitive%20guide/2014-04/java-performancethe-definitive-guide-chapter-1-2.html"/>
   <updated>2014-04-27T00:00:00+08:00</updated>
   <id>http://bboniao.com/java%20performance:the%20definitive%20guide/2014-04/java-performancethe-definitive-guide-chapter-1-2</id>
   <content type="html">The Complete Performance Story


Write Better Algorithms
Write Less Code
Prematurely Optimize
Look Elsewhere: The Database Is Always the Bottleneck
Optimize for the Common Case


Optimize code by profiling it and focusing on the operations in the profile taking the most time
Apply Occam&amp;#39;s Raz...</content>
 </entry>
 
 <entry>
   <title>System Performance Enterprise and the Cloud Chapter 1-2></title>
   <link href="http://bboniao.com/system%20performance%20enterprise%20and%20the%20cloud/2014-04/system-performance-enterprise-and-the-cloud-chapter-1.html"/>
   <updated>2014-04-26T00:00:00+08:00</updated>
   <id>http://bboniao.com/system%20performance%20enterprise%20and%20the%20cloud/2014-04/system-performance-enterprise-and-the-cloud-chapter-1</id>
   <content type="html">Generic system software stack





Activities


Setting performance objectives and performance modeling
Performance characterization of prototype software or hardware
Performance analysis of development code, pre-integration
Performing non-regression testing of software builds, pre- or post-relea...</content>
 </entry>
 
 <entry>
   <title>JVM致命错误日志（hs_err_pid.log）解读></title>
   <link href="http://bboniao.com/jvm/2014-04/jvmhs_err_pidlog.html"/>
   <updated>2014-04-22T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-04/jvmhs_err_pidlog</id>
   <content type="html">淘宝的一个ppt

转自《四火的唠叨》

致命错误出现的时候，JVM生成了hserrpid.log这样的文件，其中往往包含了虚拟机崩溃原因的重要信息。因为经常遇到，在这篇文章里，我挑选了一个，并且逐段分析它包含的内容（文件可以在文章最后下载）。默认情况下文件是创建在工作目录下的（如果没权限创建的话JVM会尝试把文件写到/tmp这样的临时目录下面去），当然，文件格式和路径也可以通过参数指定，比如：
java -XX:ErrorFile=/var/log/java/java_error%p.log



这个文件将包括：
触发致命错误的操作异常或者信号；
版本和配置信息；
触发致命异常的线程...</content>
 </entry>
 
 <entry>
   <title>java core dump analysis></title>
   <link href="http://bboniao.com/jvm/2014-04/java-core-dump-analysis.html"/>
   <updated>2014-04-22T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-04/java-core-dump-analysis</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>java cpu monitor></title>
   <link href="http://bboniao.com/jvm/2014-04/java-cpu-monitor.html"/>
   <updated>2014-04-16T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-04/java-cpu-monitor</id>
   <content type="html">转自java-cpu-monitor shell脚本
#!/bin/bash                                                                                                                           

threshold=${1-95}
now=$(date &amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;)
cache=()

jps -q | xargs ps hH k -pcpu o pid,lwp,pcpu,args \
  | awk &amp;quot;...</content>
 </entry>
 
 <entry>
   <title>HBase在单Column和多Column情况下批量Put的性能对比分析></title>
   <link href="http://bboniao.com/hbase/2014-04/hbasecolumncolumnput.html"/>
   <updated>2014-04-16T00:00:00+08:00</updated>
   <id>http://bboniao.com/hbase/2014-04/hbasecolumncolumnput</id>
   <content type="html">转自量子恒道官方博客

针对HBase在单column family单column qualifier和单column family多column qualifier两种场景下，分别批量Put写入时的性能对比情况，下面是结合HBase的源码来简单分析解释这一现象。

1. 测试结果

在客户端批量写入时，单列族单列模式和单列族多列模式的TPS和RPC次数相差很大，以客户端10个线程，开启WAL的两种模式下的测试数据为例，

1)单列族单列模式下，TPS能够达到12403.87，实际RPC次数为53次；

2)单列族多列模式下，TPS只有1730.68，实际RPC次数为478次。

二者T...</content>
 </entry>
 
 <entry>
   <title>hbase delete put的陷阱></title>
   <link href="http://bboniao.com/hbase/2014-04/hbase-delete-put.html"/>
   <updated>2014-04-16T00:00:00+08:00</updated>
   <id>http://bboniao.com/hbase/2014-04/hbase-delete-put</id>
   <content type="html">问题

删除数据之后,再插入,查询的时候怎么也找不到.删除和插入都是同一个rowkey,同一个列,同一个版本.

原因

如果rowkey/family/qulifier/timestamp都一样,多次删除和插入之后,获取哪个值取决于KeyValue.Type.Put之前是Delete就不会被插入了.



分析
KeyValue(byte[] row, int roffset, int rlength,  
   byte[] family, int foffset, int flength, byte[] qualifier, int qoffset,  
   int qlengt...</content>
 </entry>
 
 <entry>
   <title>为什么要控制hbase cloumnFamily的数量></title>
   <link href="http://bboniao.com/hbase/2014-04/hbase-cloumnfamily.html"/>
   <updated>2014-04-16T00:00:00+08:00</updated>
   <id>http://bboniao.com/hbase/2014-04/hbase-cloumnfamily</id>
   <content type="html">设计Hbase schema,要尽量使用一个column family.原因主要是flush和compact机制造成的.

flush和compact都是基于region级别的:当一个column family数据导入过多,发生flush,也会触发其他所有column family的(此时很小的memstore也会被触发的).而flush会生成很多storefile,紧接着就会触发compact.过多没必要的flush/compact会大大增加io的开销,影响hbase整体性能.


</content>
 </entry>
 
 <entry>
   <title>memcache使用一致性hash,找出指向的节点></title>
   <link href="http://bboniao.com/memcache/2014-04/memcachehash.html"/>
   <updated>2014-04-14T00:00:00+08:00</updated>
   <id>http://bboniao.com/memcache/2014-04/memcachehash</id>
   <content type="html">代码如下
//地址列表
String[] array = addrs.split(&amp;quot;;&amp;quot;);
List&amp;lt;InetSocketAddress&amp;gt; isa = new ArrayList&amp;lt;InetSocketAddress&amp;gt;();
for(int i = 0;i &amp;lt; array.length;i ++){
    String[] addr = array[i].split(&amp;quot;:&amp;quot;);
    isa.add(new InetSocketAddress(addr[0], Integer.parseInt(addr[1])))...</content>
 </entry>
 
 <entry>
   <title>A Better Log4j SMTPAppender></title>
   <link href="http://bboniao.com/java/2014-04/a-better-log4j-smtpappender.html"/>
   <updated>2014-04-12T00:00:00+08:00</updated>
   <id>http://bboniao.com/java/2014-04/a-better-log4j-smtpappender</id>
   <content type="html">log4j配置mail发送log,会有多少发多少,如下改动可以在指定时间内发送指定次数的log

java代码
package com.sohu.rc.util;
import org.apache.log4j.net.SMTPAppender;
public class LimitedSMTPAppender extends SMTPAppender {
    private int limit = 10; // max at 10 mails ...
    private int cycleSeconds = 3600; // ... per hour

    public
 ...</content>
 </entry>
 
 <entry>
   <title>Kill Zombie Process></title>
   <link href="http://bboniao.com/linux/2014-04/kill-zombie-process.html"/>
   <updated>2014-04-01T00:00:00+08:00</updated>
   <id>http://bboniao.com/linux/2014-04/kill-zombie-process</id>
   <content type="html">查找僵尸进程

ps aux |awk &amp;#39;{print $8 &amp;quot; &amp;quot; $2}&amp;#39; |grep -w Z

查找此进程信息和父进程pid

ps -ef |grep $pid


</content>
 </entry>
 
 <entry>
   <title>记录一次resin load过高的解决过程></title>
   <link href="http://bboniao.com/java/2014-03/resin-load.html"/>
   <updated>2014-03-23T00:00:00+08:00</updated>
   <id>http://bboniao.com/java/2014-03/resin-load</id>
   <content type="html">1.使用housemd统计方法耗时,中文说明

./housewd $jvm_pid

trace -d  -l 50000 -t 50000 ClassName

2.使用ss统计tcp信息,参照文章

ss -s

ss -t -a | grep ESTAB



3.统计java各个线程的个数

jstack $jvm_pid | grep &amp;#39;nid=&amp;#39; | awk -F &amp;#39;-&amp;#39; &amp;#39;{print $1}&amp;#39; | awk &amp;#39;{++S[$0]} END {for (a in S) print S[a],a}&amp;#39; | sort ...</content>
 </entry>
 
 <entry>
   <title>jmeter使用></title>
   <link href="http://bboniao.com/java/2014-03/jmeter.html"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/java/2014-03/jmeter</id>
   <content type="html">1.pom.xml引入依赖
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.jmeter&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;ApacheJMeter_java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${apache.jmeter.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;

    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.a...</content>
 </entry>
 
 <entry>
   <title>hadoop2和hbase0.96的配置></title>
   <link href="http://bboniao.com/hadoop/2014-03/hadoop2hbase096.html"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/hadoop/2014-03/hadoop2hbase096</id>
   <content type="html">

集群
hadoop
hbase



资料库
hadoop-1.0.3
hbase-0.92.1


标示库
hadoop-1.0.3
hbase-0.92.1


测试库
hadoop-2.2.0
hbase-0.96.1




</content>
 </entry>
 
 <entry>
   <title>hadoop2 compile></title>
   <link href="http://bboniao.com/hadoop/2014-03/hadoop2-compile.html"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/hadoop/2014-03/hadoop2-compile</id>
   <content type="html">使用Maven 3.0

安装依赖的包:
yum install gcc-c++ cmake zlib-devel

安装protobuf

编辑hadoop-common-project/hadoop-auth/pom.xml.添加
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jetty-util&amp;lt;/artifactId&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;

执行命令...</content>
 </entry>
 
 <entry>
   <title>Linux小技巧></title>
   <link href="http://bboniao.com/linux/2014-03/linux-trip.html"/>
   <updated>2014-03-13T00:00:00+08:00</updated>
   <id>http://bboniao.com/linux/2014-03/linux-trip</id>
   <content type="html">查找wio过高进程


/etc/init.d/syslog stop
echo 1 &amp;gt; /proc/sys/vm/block_dump
dmesg | egrep &amp;quot;READ|WRITE|dirtied&amp;quot; | egrep -o &amp;#39;([a-zA-Z]*)&amp;#39; | sort | uniq -c | sort -rn | head
echo 0 &amp;gt; /proc/sys/vm/block_dump
/etc/init.d/syslog start




Linux分析jvm的cpu性能瓶颈


使用ps aux找到jvm的pid
执行top -H...</content>
 </entry>
 
 <entry>
   <title>JVM常用的参数说明></title>
   <link href="http://bboniao.com/jvm/2014-03/jvm-parameter.html"/>
   <updated>2014-03-13T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-03/jvm-parameter</id>
   <content type="html">

参数
描述



-Djava.io.tmpdir
指定目录,可以避免jps找不到pid


-XX:+PrintFlagsFinal
打印jvm参数的默认值


-XX:+PrintCommandLineFlags
打印与默认值不同的参数




</content>
 </entry>
 
 <entry>
   <title>Java Mission Control></title>
   <link href="http://bboniao.com/jvm/2014-03/java-mission-control.html"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-03/java-mission-control</id>
   <content type="html">Mac上使用


下载jdk7u40以后的版本,执行jmc.mac os上暂时用不了,但可以用方法2
使用eclipse:
eclipse3.8
使用其他平台jdk的jmc更新完插件,拷贝JAVA_HOME/lib/missioncontrol/plugins下的jar包到eclipse/plugins即可


启动Java Flight Recorder (JFR)


启动参数:

-Dcom.sun.management.jmxremote.port=7091 -Dcom.sun.management.jmxremote.rmi.port=7091 -Dcom.sun.manage...</content>
 </entry>
 
 <entry>
   <title>jekyll使用七牛的CDN></title>
   <link href="http://bboniao.com/jekyll/2014-03/jekyllcdn.html"/>
   <updated>2014-03-09T00:00:00+08:00</updated>
   <id>http://bboniao.com/jekyll/2014-03/jekyllcdn</id>
   <content type="html">注册七牛

进入七牛的用户界面,创建一个空间,访问控制选择公开,然后点击一键加速网站,填写你的网站地址

修改_config.xml
safe: false
cdn_url : http://bboniao.qiniudn.com
JB :
ASSET_PATH : false
IMAGE_PATH : false



修改_includes/JB/setup,

这样的好处本地不会使用cdn,而发布到githup上使用site.cdn_url上的资源



说明

/assets和/images下的资源会缓存到cdn,使用的时候用 {{ ASSETPATH }} 和 {{ IMAGE...</content>
 </entry>
 
 <entry>
   <title>常用工具包收集></title>
   <link href="http://bboniao.com/tools/2014-03/tools.html"/>
   <updated>2014-03-07T00:00:00+08:00</updated>
   <id>http://bboniao.com/tools/2014-03/tools</id>
   <content type="html">GC Log分析工具,支持G1.
code地址

Thread Dump Viewer.
code地址

Thread Dump Analyzer.
code地址

GC Histogram Tool,不支持G1.
code地址



shell 调用jmx接口

Java进程运行时诊断和调试工具
code地址
</content>
 </entry>
 
 <entry>
   <title>G1(Garbage First)的使用></title>
   <link href="http://bboniao.com/jvm/2014-03/g1garbage-first.html"/>
   <updated>2014-03-07T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-03/g1garbage-first</id>
   <content type="html">为什么采用G1

Hbase开启SLAB之后还是会产生很多碎片,导致Full GC.原因是BlockCache产生很多碎片,CMS对碎片无能为力.采用G1吞吐量与CMS相当

我的参数配置(g1和cms)
-Xmx24g -Xms24g -XX:PermSize=96m -XX:MaxPermSize=96m -XX:+UseG1GC -XX:SurvivorRatio=6 -XX:MaxGCPauseMillis=400 -XX:G1ReservePercent=15  -XX:InitiatingHeapOccupancyPercent=40 -XX:ConcGCThreads=8
...</content>
 </entry>
 

</feed>
