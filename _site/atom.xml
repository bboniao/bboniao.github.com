<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>My Blog</title>
 <link href="http://bboniao.com/" rel="self"/>
 <link href="http://bboniao.com"/>
 <updated>2014-04-12T20:51:14+08:00</updated>
 <id>http://bboniao.com</id>
 <author>
   <name>bboniao</name>
   <email>bboniao@gmail.com</email>
 </author>

 
 <entry>
   <title>A Better Log4j SMTPAppender</title>
   <link href="http://bboniao.com/java/2014-04/a-better-log4j-smtpappender.html"/>
   <updated>2014-04-12T00:00:00+08:00</updated>
   <id>http://bboniao.com/java/2014-04/a-better-log4j-smtpappender</id>
   <content type="html">&lt;h3&gt;log4j配置mail发送log,会有多少发多少,如下改动可以在指定时间内发送指定次数的log&lt;/h3&gt;

&lt;h3&gt;java代码&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;package com.sohu.rc.util;
import org.apache.log4j.net.SMTPAppender;
public class LimitedSMTPAppender extends SMTPAppender {
    private int limit = 10; // max at 10 mails ...
    private int cycleSeconds = 3600; // ... per hour
    public void setLimit(int limit) {
        this.limit = limit;
    }
    public void setCycleSeconds(int cycleSeconds) {
        this.cycleSeconds = cycleSeconds;
    }
    private int lastVisited;
    private long lastCycle;
    @Override
    protected boolean checkEntryConditions() {
        final long now = System.currentTimeMillis();
        final long thisCycle = now - (now % (1000L * cycleSeconds));
        if (lastCycle != thisCycle) {
            lastCycle = thisCycle;
            lastVisited = 0;
        }
        lastVisited++;
        return super.checkEntryConditions() &amp;amp;&amp;amp; lastVisited &amp;lt;= limit;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;log4j.properties的配置&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;log4j.rootLogger=info,mail
log4j.threshhold=ALL

log4j.appender.mail=com.sohu.rc.util.LimitedSMTPAppender
log4j.appender.mail.limit=3
log4j.appender.mail.cycleSeconds=60
log4j.appender.mail.Threshold=ERROR
log4j.appender.mail.BufferSize=32
log4j.appender.mail.From = bboniao@gmail.com
log4j.appender.mail.SMTPHost=10.11.132.229
log4j.appender.mail.Subject=Rc_Strategy_Log4J_Message
log4j.appender.mail.To= bboniao@163.com
log4j.appender.mail.layout=org.apache.log4j.PatternLayout
log4j.appender.mail.layout.ConversionPattern=[%-5p] %d(%r) --&amp;gt; [%t] %l: %m %x %n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;hadoop/hbase配置&lt;/h3&gt;

&lt;h5&gt;hadoop:打开bin/hadoop-daemon.sh,配置&lt;code&gt;HADOOP_ROOT_LOGGER&lt;/code&gt;&lt;/h5&gt;

&lt;h5&gt;hbase:打开bin/hbase-daemon.sh,配置&lt;code&gt;HBASE_ROOT_LOGGER&lt;/code&gt;&lt;/h5&gt;

&lt;h3&gt;&lt;a href=&quot;http://blog.cherouvim.com/a-better-smtpappender/&quot;&gt;参考链接&lt;/a&gt;&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Kill Zombie Process</title>
   <link href="http://bboniao.com/linux/2014-04/kill-zombie-process.html"/>
   <updated>2014-04-01T00:00:00+08:00</updated>
   <id>http://bboniao.com/linux/2014-04/kill-zombie-process</id>
   <content type="html">&lt;h3&gt;查找僵尸进程&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ps aux |awk &amp;#39;{print $8 &amp;quot; &amp;quot; $2}&amp;#39; |grep -w Z&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;查找此进程信息和父进程pid&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ps -ef |grep $pid&lt;/code&gt;&lt;/p&gt;

&lt;!-- more --&gt;
</content>
 </entry>
 
 <entry>
   <title>记录一次resin load过高的解决过程</title>
   <link href="http://bboniao.com/java/2014-03/resin-load.html"/>
   <updated>2014-03-23T00:00:00+08:00</updated>
   <id>http://bboniao.com/java/2014-03/resin-load</id>
   <content type="html">&lt;h5&gt;1.使用&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/0.2.6/housemd-0.2.6.zip&quot;&gt;housemd&lt;/a&gt;统计方法耗时,&lt;a href=&quot;https://github.com/CSUG/HouseMD/wiki/UserGuideCN&quot;&gt;中文说明&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;./housewd $jvm_pid&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;trace -d  -l 50000 -t 50000 ClassName&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;2.使用ss统计tcp信息,参照&lt;a href=&quot;http://www.ttlsa.com/linux-command/ss-replace-netstat/&quot;&gt;文章&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;ss -s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ss -t -a | grep ESTAB&lt;/code&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h5&gt;3.统计java各个线程的个数&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;jstack $jvm_pid | grep &amp;#39;nid=&amp;#39; | awk -F &amp;#39;-&amp;#39; &amp;#39;{print $1}&amp;#39; | awk &amp;#39;{++S[$0]} END {for (a in S) print S[a],a}&amp;#39; | sort -nr&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;4.统计各个状态线程的个数&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;jstack $jvm_pid | grep java.lang.Thread.State | awk &amp;#39;{++S[$0]} END {for (a in S) print S[a],a}&amp;#39; | sort -nr&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;5.查找哪些线程cpu使用过高&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;jstack $jvm_pid &amp;gt; jstack01 &amp;amp;&amp;amp; ps mp $jvm_pid -o THREAD,tid,time | sort -k2nr | awk &amp;#39;{printf(&amp;quot;%x&amp;quot;,$8)}{print &amp;quot; &amp;quot;,($2&amp;quot;%&amp;quot;),&amp;quot; &amp;quot;,$9}&amp;#39; | head -30&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jmeter使用</title>
   <link href="http://bboniao.com/java/2014-03/jmeter.html"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/java/2014-03/jmeter</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>hadoop2和hbase0.96的配置</title>
   <link href="http://bboniao.com/hadoop/2014-03/hadoop2hbase096.html"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/hadoop/2014-03/hadoop2hbase096</id>
   <content type="html">&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;集群&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;hadoop&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;hbase&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;资料库&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/tag/hadoop1.major.conf&quot;&gt;hadoop-1.0.3&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/tag/hbase92.major.conf&quot;&gt;hbase-0.92.1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;标示库&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/tag/hadoop1.map.conf&quot;&gt;hadoop-1.0.3&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/tag/hbase92.map.conf&quot;&gt;hbase-0.92.1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;测试库&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/tag/hadoop2.conf&quot;&gt;hadoop-2.2.0&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/tag/hbase96.conf&quot;&gt;hbase-0.96.1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;!-- more --&gt;
</content>
 </entry>
 
 <entry>
   <title>hadoop2 compile</title>
   <link href="http://bboniao.com/hadoop/2014-03/hadoop2-compile.html"/>
   <updated>2014-03-15T00:00:00+08:00</updated>
   <id>http://bboniao.com/hadoop/2014-03/hadoop2-compile</id>
   <content type="html">&lt;h3&gt;使用Maven 3.0&lt;/h3&gt;

&lt;h3&gt;安装依赖的包:&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;yum install gcc-c++ cmake zlib-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;安装protobuf&lt;/h3&gt;

&lt;h3&gt;编辑hadoop-common-project/hadoop-auth/pom.xml.添加&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;jetty-util&amp;lt;/artifactId&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;执行命令:&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;mvn package -Pdist,native -DskipTests -Dtar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;编译好的tar在hadoop-common-project/hadoop-common/target&lt;/h3&gt;

&lt;!-- more --&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux小技巧</title>
   <link href="http://bboniao.com/linux/2014-03/linux-trip.html"/>
   <updated>2014-03-13T00:00:00+08:00</updated>
   <id>http://bboniao.com/linux/2014-03/linux-trip</id>
   <content type="html">&lt;h3&gt;查找wio过高进程&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;/etc/init.d/syslog stop&lt;/li&gt;
&lt;li&gt;echo 1 &amp;gt; /proc/sys/vm/block_dump&lt;/li&gt;
&lt;li&gt;dmesg | egrep &amp;quot;READ|WRITE|dirtied&amp;quot; | egrep -o &amp;#39;([a-zA-Z]*)&amp;#39; | sort | uniq -c | sort -rn | head&lt;/li&gt;
&lt;li&gt;echo 0 &amp;gt; /proc/sys/vm/block_dump&lt;/li&gt;
&lt;li&gt;/etc/init.d/syslog start&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h3&gt;Linux分析jvm的cpu性能瓶颈&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用ps aux找到jvm的pid&lt;/li&gt;
&lt;li&gt;执行top -H -p &amp;lt;pid&amp;gt;，可显示出该进程下的所有线程。找到占用cpu最多的子线程pid，并将其转换为16进制&lt;/li&gt;
&lt;li&gt;jstack &amp;lt;pid&amp;gt; 查找&amp;quot;nid=16进制子pid&amp;quot;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;memcache的启动参数&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;/opt/memcache/bin/memcached -d -f 1.1 -M -m 4096 -o slab_reassign slab_automove -u root -l 10.11.6.31 -p 12336 -c 1024 -P /opt/memcache/memcached.pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-d&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;守护进程方式启动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-f&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;增长因子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-M&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;内存用光时报错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-m&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;使用内存大小,单位m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-o&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;子参数:slab&lt;em&gt;reassign,slab&lt;/em&gt;automove,cache就会以每10秒一次的频率进行重分配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-u&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;启动的用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-l&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;绑定地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-p&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;绑定端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-c&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;连接数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-P&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;pid保存文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>JVM常用的参数说明</title>
   <link href="http://bboniao.com/jvm/2014-03/jvm-parameter.html"/>
   <updated>2014-03-13T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-03/jvm-parameter</id>
   <content type="html">&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-Djava.io.tmpdir&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;指定目录,可以避免jps找不到pid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:+PrintFlagsFinal&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;打印jvm参数的默认值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:+PrintCommandLineFlags&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;打印与默认值不同的参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;!-- more --&gt;
</content>
 </entry>
 
 <entry>
   <title>Java Mission Control</title>
   <link href="http://bboniao.com/jvm/2014-03/java-mission-control.html"/>
   <updated>2014-03-11T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-03/java-mission-control</id>
   <content type="html">&lt;h3&gt;Mac上使用&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;下载&lt;code&gt;jdk7u40&lt;/code&gt;以后的版本,执行jmc.mac os上暂时用不了,但可以用方法2&lt;/li&gt;
&lt;li&gt;使用eclipse:
&lt;a href=&quot;http://archive.eclipse.org/eclipse/downloads/drops/R-3.8-201206081200/download.php?dropFile=eclipse-platform-3.8-macosx-cocoa-x86_64.tar.gz&quot;&gt;eclipse3.8&lt;/a&gt;
使用其他平台jdk的jmc更新完插件,拷贝JAVA_HOME/lib/missioncontrol/plugins下的jar包到eclipse/plugins即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;启动Java Flight Recorder (JFR)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动参数:&lt;/p&gt;

&lt;p&gt;-Dcom.sun.management.jmxremote.port=7091 -Dcom.sun.management.jmxremote.rmi.port=7091 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false  -XX:+UnlockCommercialFeatures -XX:+FlightRecorder&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动代理(5596是jvm的pid,jvm启动时必须添加-XX:+UnlockCommercialFeatures -XX:+FlightRecorder):&lt;/p&gt;

&lt;p&gt;jcmd 5596 ManagementAgent.start jmxremote.ssl=false jmxremote.port=7091 jmxremote.rmi.port=7091 jmxremote.authenticate=false jmxremote.autodiscovery=true &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>jekyll使用七牛的CDN</title>
   <link href="http://bboniao.com/jekyll/2014-03/jekyllcdn.html"/>
   <updated>2014-03-09T00:00:00+08:00</updated>
   <id>http://bboniao.com/jekyll/2014-03/jekyllcdn</id>
   <content type="html">&lt;h3&gt;注册七牛&lt;/h3&gt;

&lt;p&gt;进入&lt;a href=&quot;https://portal.qiniu.com/&quot;&gt;七牛的用户界面&lt;/a&gt;,创建一个空间,访问控制选择公开,然后点击一键加速网站,填写你的网站地址&lt;/p&gt;

&lt;h3&gt;修改_config.xml&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;safe: false
cdn_url : http://bboniao.qiniudn.com
JB :
ASSET_PATH : false
IMAGE_PATH : false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- more --&gt;

&lt;h3&gt;修改_includes/JB/setup,&lt;/h3&gt;

&lt;p&gt;这样的好处本地不会使用cdn,而发布到githup上使用&lt;code&gt;site.cdn_url&lt;/code&gt;上的资源&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/qiniu-cdn-jekyll-code.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

&lt;h3&gt;说明&lt;/h3&gt;

&lt;p&gt;/assets和/images下的资源会缓存到cdn,使用的时候用 {{ ASSET&lt;em&gt;PATH }} 和 {{ IMAGE&lt;/em&gt;PATH }} 来代替.更改缓存的内容时,需要到七牛后台界面的空间设置--高级设置--去刷新&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>常用工具包收集</title>
   <link href="http://bboniao.com/tools/2014-03/tools.html"/>
   <updated>2014-03-07T00:00:00+08:00</updated>
   <id>http://bboniao.com/tools/2014-03/tools</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/gcviewer-1.34-SNAPSHOT/gcviewer-1.34-SNAPSHOT.jar&quot;&gt;GC Log分析工具,支持G1.&lt;/a&gt;
&lt;a href=&quot;https://github.com/chewiebug/GCViewer&quot;&gt;code地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/tdv1.1/tdv1.1.jar&quot;&gt;Thread Dump Viewer.&lt;/a&gt;
&lt;a href=&quot;http://sourceforge.net/projects/tdv/&quot;&gt;code地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/tda2.2/tda.jar&quot;&gt;Thread Dump Analyzer.&lt;/a&gt;
&lt;a href=&quot;http://sourceforge.net/projects/tdv/&quot;&gt;code地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/gchisto/gchisto.jar&quot;&gt;GC Histogram Tool,不支持G1.&lt;/a&gt;
&lt;a href=&quot;https://svn.java.net/svn/tda%7Esvn&quot;&gt;code地址&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/cmdline-jmxclient-0.10.3/cmdline-jmxclient-0.10.3.jar&quot;&gt;shell 调用jmx接口&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bboniao/bboniao.github.com/releases/download/0.2.6/housemd-0.2.6.zip&quot;&gt;Java进程运行时诊断和调试工具&lt;/a&gt;
&lt;a href=&quot;https://github.com/CSUG/HouseMD&quot;&gt;code地址&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>G1(Garbage First)的使用</title>
   <link href="http://bboniao.com/jvm/2014-03/g1garbage-first.html"/>
   <updated>2014-03-07T00:00:00+08:00</updated>
   <id>http://bboniao.com/jvm/2014-03/g1garbage-first</id>
   <content type="html">&lt;h3&gt;为什么采用G1&lt;/h3&gt;

&lt;p&gt;Hbase开启SLAB之后还是会产生很多碎片,导致Full GC.原因是BlockCache产生很多碎片,CMS对碎片无能为力.采用G1吞吐量与CMS相当&lt;/p&gt;

&lt;h3&gt;我的参数配置(g1和cms)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;-Xmx24g -Xms24g -XX:PermSize=96m -XX:MaxPermSize=96m -XX:+UseG1GC -XX:SurvivorRatio=6 -XX:MaxGCPauseMillis=400 -XX:G1ReservePercent=15  -XX:InitiatingHeapOccupancyPercent=40 -XX:ConcGCThreads=8

-Xmx24g -Xms24g -Xmn5g -XX:PermSize=96m -XX:MaxPermSize=96m -XX:SurvivorRatio=2 -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=68 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=0 -XX:+CMSConcurrentMTEnabled -XX:PretenureSizeThreshold=2097151 -XX:MaxTenuringThreshold=6 -XX:-OmitStackTraceInFastThrow -XX:+CMSScavengeBeforeRemark
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;新生代和region大小没有指定,G1可以更好的自动分配资源.&lt;/li&gt;
&lt;li&gt;提高MaxGCPauseMillis,实时性要求没有太严格,可以提高吞吐量&lt;/li&gt;
&lt;li&gt;提高G1ReservePercent,降低InitiatingHeapOccupancyPercent,提高ConcGCThreads因为遇到内存不足而产生了Full GC&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h3&gt;G1常用参数&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;参数&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:+UseG1GC&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;开启G1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:MaxGCPauseMillis=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置GC暂停的最大时间,这只是目标,尽量达到,默认值是 200 毫秒,&lt;code&gt;过小影响吞吐量&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:InitiatingHeapOccupancyPercent=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;整个堆(而不是某个年代)使用量达到此值,便会触发并发GC周期.值为0则是连续触发,默认值为45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:NewRatio=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;老年代与新生代的比值,默认值为2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:SurvivorRatio=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;伊甸园代与生存代的比率,默认值为8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:MaxTenuringThreshold=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;生存代存活的最大门限,默认值为15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:ParallelGCThreads=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置垃圾回收器并行阶段的线程数,默认值与JVM运行的平台有关,&lt;code&gt;将 n 的值设置为逻辑处理器的数量&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:ConcGCThreads=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置并发垃圾回收器使用的线程数,默认值与JVM运行的平台有关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:G1ReservePercent=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置剩余的内存量,减少跃迁失败的可能,默认值为10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;-XX:G1HeapRegionSize=n&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置G1平分java堆而产生区域的大小,默认值可以提供最大的工效性.最小值为1M,最大为32M,最多划分1024个,&lt;code&gt;建议使用默认值&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;标记周期的各个阶段&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始标记阶段：&lt;/strong&gt;在此阶段，G1 GC 对根进行标记。该阶段与常规的 (&lt;code&gt;STW&lt;/code&gt;) 年轻代垃圾回收密切相关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根区域扫描阶段：&lt;/strong&gt;G1 GC 在初始标记的存活区扫描对老年代的引用，并标记被引用的对象。该阶段与应用程序（&lt;code&gt;非STW&lt;/code&gt;）同时运行，并且只有完成该阶段后，才能开始下一次 &lt;code&gt;STW&lt;/code&gt; 年轻代垃圾回收。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发标记阶段：&lt;/strong&gt;G1 GC 在整个堆中查找可访问的（存活的）对象。该阶段与应用程序同时运行，可以被 &lt;code&gt;STW&lt;/code&gt; 年轻代垃圾回收中断。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重新标记阶段：&lt;/strong&gt;该阶段是 &lt;code&gt;STW&lt;/code&gt; 回收，帮助完成标记周期。G1 GC 清空 SATB 缓冲区，跟踪未被访问的存活对象，并执行引用处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清理阶段：&lt;/strong&gt;在这个最后阶段，G1 GC 执行统计和 RSet 净化的 &lt;code&gt;STW&lt;/code&gt; 操作。在统计期间，G1 GC 会识别完全空闲的区域和可供进行混合垃圾回收的区域。清理阶段在将空白区域重置并返回到空闲列表时为部分并发。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;内存用尽造成Full GC&lt;/h3&gt;

&lt;p&gt;查找&lt;code&gt;to-space exhausted&lt;/code&gt;和&lt;code&gt;to-space overflow&lt;/code&gt;,表示因内存不够产生Full GC&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;-XX:G1ReservePercent 增加预存内存量&lt;/li&gt;
&lt;li&gt;-XX:InitiatingHeapOccupancyPercent 减少此值,提前启动标记周期&lt;/li&gt;
&lt;li&gt; -XX:ConcGCThreads 增加并行标记线程的数目&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 
</feed>